"""
Location Service
Handles property location by pincode with radius search
"""

import asyncio
import requests
from typing import Dict, List, Optional, Any, Tuple
from ..db.supabase_client import db

class LocationService:
    """Service for handling property locations and pincode-based searches"""
    
    # Cache for dynamically fetched coordinates
    _coordinate_cache = {}
    
    # Indian pincode to coordinates mapping (expanded data)
    PINCODE_COORDINATES = {
        # Mumbai
        "400001": (19.0760, 72.8777), "400002": (19.0760, 72.8777), "400003": (19.0760, 72.8777),
        "400004": (19.0760, 72.8777), "400005": (19.0760, 72.8777), "400006": (19.0760, 72.8777),
        "400007": (19.0760, 72.8777), "400008": (19.0760, 72.8777), "400009": (19.0760, 72.8777),
        "400010": (19.0760, 72.8777), "400011": (19.0760, 72.8777), "400012": (19.0760, 72.8777),
        "400013": (19.0760, 72.8777), "400014": (19.0760, 72.8777), "400015": (19.0760, 72.8777),
        "400016": (19.0760, 72.8777), "400017": (19.0760, 72.8777), "400018": (19.0760, 72.8777),
        "400019": (19.0760, 72.8777), "400020": (19.0760, 72.8777), "400021": (19.0760, 72.8777),
        "400022": (19.0760, 72.8777), "400023": (19.0760, 72.8777), "400024": (19.0760, 72.8777),
        "400025": (19.0760, 72.8777), "400026": (19.0760, 72.8777), "400027": (19.0760, 72.8777),
        "400028": (19.0760, 72.8777), "400029": (19.0760, 72.8777), "400030": (19.0760, 72.8777),
        "400031": (19.0760, 72.8777), "400032": (19.0760, 72.8777), "400033": (19.0760, 72.8777),
        "400034": (19.0760, 72.8777), "400035": (19.0760, 72.8777), "400036": (19.0760, 72.8777),
        "400037": (19.0760, 72.8777), "400038": (19.0760, 72.8777), "400039": (19.0760, 72.8777),
        "400040": (19.0760, 72.8777), "400041": (19.0760, 72.8777), "400042": (19.0760, 72.8777),
        "400043": (19.0760, 72.8777), "400044": (19.0760, 72.8777), "400045": (19.0760, 72.8777),
        "400046": (19.0760, 72.8777), "400047": (19.0760, 72.8777), "400048": (19.0760, 72.8777),
        "400049": (19.0760, 72.8777), "400050": (19.0760, 72.8777), "400051": (19.0760, 72.8777),
        "400052": (19.0760, 72.8777), "400053": (19.0760, 72.8777), "400054": (19.0760, 72.8777),
        "400055": (19.0760, 72.8777), "400056": (19.0760, 72.8777), "400057": (19.0760, 72.8777),
        "400058": (19.0760, 72.8777), "400059": (19.0760, 72.8777), "400060": (19.0760, 72.8777),
        "400061": (19.0760, 72.8777), "400062": (19.0760, 72.8777), "400063": (19.0760, 72.8777),
        "400064": (19.0760, 72.8777), "400065": (19.0760, 72.8777), "400066": (19.0760, 72.8777),
        "400067": (19.0760, 72.8777), "400068": (19.0760, 72.8777), "400069": (19.0760, 72.8777),
        "400070": (19.0760, 72.8777), "400071": (19.0760, 72.8777), "400072": (19.0760, 72.8777),
        "400073": (19.0760, 72.8777), "400074": (19.0760, 72.8777), "400075": (19.0760, 72.8777),
        "400076": (19.0760, 72.8777), "400077": (19.0760, 72.8777), "400078": (19.0760, 72.8777),
        "400079": (19.0760, 72.8777), "400080": (19.0760, 72.8777), "400081": (19.0760, 72.8777),
        "400082": (19.0760, 72.8777), "400083": (19.0760, 72.8777), "400084": (19.0760, 72.8777),
        "400085": (19.0760, 72.8777), "400086": (19.0760, 72.8777), "400087": (19.0760, 72.8777),
        "400088": (19.0760, 72.8777), "400089": (19.0760, 72.8777), "400090": (19.0760, 72.8777),
        "400091": (19.0760, 72.8777), "400092": (19.0760, 72.8777), "400093": (19.0760, 72.8777),
        "400094": (19.0760, 72.8777), "400095": (19.0760, 72.8777), "400096": (19.0760, 72.8777),
        "400097": (19.0760, 72.8777), "400098": (19.0760, 72.8777), "400099": (19.0760, 72.8777),
        "400100": (19.0760, 72.8777),
        
        # Hyderabad
        "500001": (17.3850, 78.4867), "500002": (17.3850, 78.4867), "500003": (17.3850, 78.4867),
        "500004": (17.3850, 78.4867), "500005": (17.3850, 78.4867), "500006": (17.3850, 78.4867),
        "500007": (17.3850, 78.4867), "500008": (17.3850, 78.4867), "500009": (17.3850, 78.4867),
        "500010": (17.3850, 78.4867), "500011": (17.3850, 78.4867), "500012": (17.3850, 78.4867),
        "500013": (17.3850, 78.4867), "500014": (17.3850, 78.4867), "500015": (17.3850, 78.4867),
        "500016": (17.3850, 78.4867), "500017": (17.3850, 78.4867), "500018": (17.3850, 78.4867),
        "500019": (17.3850, 78.4867), "500020": (17.3850, 78.4867), "500021": (17.3850, 78.4867),
        "500022": (17.3850, 78.4867), "500023": (17.3850, 78.4867), "500024": (17.3850, 78.4867),
        "500025": (17.3850, 78.4867), "500026": (17.3850, 78.4867), "500027": (17.3850, 78.4867),
        "500028": (17.3850, 78.4867), "500029": (17.3850, 78.4867), "500030": (17.3850, 78.4867),
        "500031": (17.3850, 78.4867), "500032": (17.3850, 78.4867), "500033": (17.3850, 78.4867),
        "500034": (17.3850, 78.4867), "500035": (17.3850, 78.4867), "500036": (17.3850, 78.4867),
        "500037": (17.3850, 78.4867), "500038": (17.3850, 78.4867), "500039": (17.3850, 78.4867),
        "500040": (17.3850, 78.4867), "500041": (17.3850, 78.4867), "500042": (17.3850, 78.4867),
        "500043": (17.3850, 78.4867), "500044": (17.3850, 78.4867), "500045": (17.3850, 78.4867),
        "500046": (17.3850, 78.4867), "500047": (17.3850, 78.4867), "500048": (17.3850, 78.4867),
        "500049": (17.3850, 78.4867), "500050": (17.3850, 78.4867), "500051": (17.3850, 78.4867),
        "500052": (17.3850, 78.4867), "500053": (17.3850, 78.4867), "500054": (17.3850, 78.4867),
        "500055": (17.3850, 78.4867), "500056": (17.3850, 78.4867), "500057": (17.3850, 78.4867),
        "500058": (17.3850, 78.4867), "500059": (17.3850, 78.4867), "500060": (17.3850, 78.4867),
        "500061": (17.3850, 78.4867), "500062": (17.3850, 78.4867), "500063": (17.3850, 78.4867),
        "500064": (17.3850, 78.4867), "500065": (17.3850, 78.4867), "500066": (17.3850, 78.4867),
        "500067": (17.3850, 78.4867), "500068": (17.3850, 78.4867), "500069": (17.3850, 78.4867),
        "500070": (17.3850, 78.4867), "500071": (17.3850, 78.4867), "500072": (17.3850, 78.4867),
        "500073": (17.3850, 78.4867), "500074": (17.3850, 78.4867), "500075": (17.3850, 78.4867),
        "500076": (17.3850, 78.4867), "500077": (17.3850, 78.4867), "500078": (17.3850, 78.4867),
        "500079": (17.3850, 78.4867), "500080": (17.3850, 78.4867), "500081": (17.3850, 78.4867),
        "500082": (17.3850, 78.4867), "500083": (17.3850, 78.4867), "500084": (17.3850, 78.4867),
        "500085": (17.3850, 78.4867), "500086": (17.3850, 78.4867), "500087": (17.3850, 78.4867),
        "500088": (17.3850, 78.4867), "500089": (17.3850, 78.4867), "500090": (17.3850, 78.4867),
        "500091": (17.3850, 78.4867), "500092": (17.3850, 78.4867), "500093": (17.3850, 78.4867),
        "500094": (17.3850, 78.4867), "500095": (17.3850, 78.4867), "500096": (17.3850, 78.4867),
        "500097": (17.3850, 78.4867), "500098": (17.3850, 78.4867), "500099": (17.3850, 78.4867),
        "500100": (17.3850, 78.4867),
        
        # Delhi
        "110001": (28.6139, 77.2090), "110002": (28.6139, 77.2090), "110003": (28.6139, 77.2090),
        "110004": (28.6139, 77.2090), "110005": (28.6139, 77.2090), "110006": (28.6139, 77.2090),
        "110007": (28.6139, 77.2090), "110008": (28.6139, 77.2090), "110009": (28.6139, 77.2090),
        "110010": (28.6139, 77.2090), "110011": (28.6139, 77.2090), "110012": (28.6139, 77.2090),
        "110013": (28.6139, 77.2090), "110014": (28.6139, 77.2090), "110015": (28.6139, 77.2090),
        "110016": (28.6139, 77.2090), "110017": (28.6139, 77.2090), "110018": (28.6139, 77.2090),
        "110019": (28.6139, 77.2090), "110020": (28.6139, 77.2090), "110021": (28.6139, 77.2090),
        "110022": (28.6139, 77.2090), "110023": (28.6139, 77.2090), "110024": (28.6139, 77.2090),
        "110025": (28.6139, 77.2090), "110026": (28.6139, 77.2090), "110027": (28.6139, 77.2090),
        "110028": (28.6139, 77.2090), "110029": (28.6139, 77.2090), "110030": (28.6139, 77.2090),
        "110031": (28.6139, 77.2090), "110032": (28.6139, 77.2090), "110033": (28.6139, 77.2090),
        "110034": (28.6139, 77.2090), "110035": (28.6139, 77.2090), "110036": (28.6139, 77.2090),
        "110037": (28.6139, 77.2090), "110038": (28.6139, 77.2090), "110039": (28.6139, 77.2090),
        "110040": (28.6139, 77.2090), "110041": (28.6139, 77.2090), "110042": (28.6139, 77.2090),
        "110043": (28.6139, 77.2090), "110044": (28.6139, 77.2090), "110045": (28.6139, 77.2090),
        "110046": (28.6139, 77.2090), "110047": (28.6139, 77.2090), "110048": (28.6139, 77.2090),
        "110049": (28.6139, 77.2090), "110050": (28.6139, 77.2090), "110051": (28.6139, 77.2090),
        "110052": (28.6139, 77.2090), "110053": (28.6139, 77.2090), "110054": (28.6139, 77.2090),
        "110055": (28.6139, 77.2090), "110056": (28.6139, 77.2090), "110057": (28.6139, 77.2090),
        "110058": (28.6139, 77.2090), "110059": (28.6139, 77.2090), "110060": (28.6139, 77.2090),
        "110061": (28.6139, 77.2090), "110062": (28.6139, 77.2090), "110063": (28.6139, 77.2090),
        "110064": (28.6139, 77.2090), "110065": (28.6139, 77.2090), "110066": (28.6139, 77.2090),
        "110067": (28.6139, 77.2090), "110068": (28.6139, 77.2090), "110069": (28.6139, 77.2090),
        "110070": (28.6139, 77.2090), "110071": (28.6139, 77.2090), "110072": (28.6139, 77.2090),
        "110073": (28.6139, 77.2090), "110074": (28.6139, 77.2090), "110075": (28.6139, 77.2090),
        "110076": (28.6139, 77.2090), "110077": (28.6139, 77.2090), "110078": (28.6139, 77.2090),
        "110079": (28.6139, 77.2090), "110080": (28.6139, 77.2090), "110081": (28.6139, 77.2090),
        "110082": (28.6139, 77.2090), "110083": (28.6139, 77.2090), "110084": (28.6139, 77.2090),
        "110085": (28.6139, 77.2090), "110086": (28.6139, 77.2090), "110087": (28.6139, 77.2090),
        "110088": (28.6139, 77.2090), "110089": (28.6139, 77.2090), "110090": (28.6139, 77.2090),
        "110091": (28.6139, 77.2090), "110092": (28.6139, 77.2090), "110093": (28.6139, 77.2090),
        "110094": (28.6139, 77.2090), "110095": (28.6139, 77.2090), "110096": (28.6139, 77.2090),
        "110097": (28.6139, 77.2090), "110098": (28.6139, 77.2090), "110099": (28.6139, 77.2090),
        "110100": (28.6139, 77.2090),
        
        # Bangalore
        "560001": (12.9716, 77.5946), "560002": (12.9716, 77.5946), "560003": (12.9716, 77.5946),
        "560004": (12.9716, 77.5946), "560005": (12.9716, 77.5946), "560006": (12.9716, 77.5946),
        "560007": (12.9716, 77.5946), "560008": (12.9716, 77.5946), "560009": (12.9716, 77.5946),
        "560010": (12.9716, 77.5946), "560011": (12.9716, 77.5946), "560012": (12.9716, 77.5946),
        "560013": (12.9716, 77.5946), "560014": (12.9716, 77.5946), "560015": (12.9716, 77.5946),
        "560016": (12.9716, 77.5946), "560017": (12.9716, 77.5946), "560018": (12.9716, 77.5946),
        "560019": (12.9716, 77.5946), "560020": (12.9716, 77.5946), "560021": (12.9716, 77.5946),
        "560022": (12.9716, 77.5946), "560023": (12.9716, 77.5946), "560024": (12.9716, 77.5946),
        "560025": (12.9716, 77.5946), "560026": (12.9716, 77.5946), "560027": (12.9716, 77.5946),
        "560028": (12.9716, 77.5946), "560029": (12.9716, 77.5946), "560030": (12.9716, 77.5946),
        "560031": (12.9716, 77.5946), "560032": (12.9716, 77.5946), "560033": (12.9716, 77.5946),
        "560034": (12.9716, 77.5946), "560035": (12.9716, 77.5946), "560036": (12.9716, 77.5946),
        "560037": (12.9716, 77.5946), "560038": (12.9716, 77.5946), "560039": (12.9716, 77.5946),
        "560040": (12.9716, 77.5946), "560041": (12.9716, 77.5946), "560042": (12.9716, 77.5946),
        "560043": (12.9716, 77.5946), "560044": (12.9716, 77.5946), "560045": (12.9716, 77.5946),
        "560046": (12.9716, 77.5946), "560047": (12.9716, 77.5946), "560048": (12.9716, 77.5946),
        "560049": (12.9716, 77.5946), "560050": (12.9716, 77.5946), "560051": (12.9716, 77.5946),
        "560052": (12.9716, 77.5946), "560053": (12.9716, 77.5946), "560054": (12.9716, 77.5946),
        "560055": (12.9716, 77.5946), "560056": (12.9716, 77.5946), "560057": (12.9716, 77.5946),
        "560058": (12.9716, 77.5946), "560059": (12.9716, 77.5946), "560060": (12.9716, 77.5946),
        "560061": (12.9716, 77.5946), "560062": (12.9716, 77.5946), "560063": (12.9716, 77.5946),
        "560064": (12.9716, 77.5946), "560065": (12.9716, 77.5946), "560066": (12.9716, 77.5946),
        "560067": (12.9716, 77.5946), "560068": (12.9716, 77.5946), "560069": (12.9716, 77.5946),
        "560070": (12.9716, 77.5946), "560071": (12.9716, 77.5946), "560072": (12.9716, 77.5946),
        "560073": (12.9716, 77.5946), "560074": (12.9716, 77.5946), "560075": (12.9716, 77.5946),
        "560076": (12.9716, 77.5946), "560077": (12.9716, 77.5946), "560078": (12.9716, 77.5946),
        "560079": (12.9716, 77.5946), "560080": (12.9716, 77.5946), "560081": (12.9716, 77.5946),
        "560082": (12.9716, 77.5946), "560083": (12.9716, 77.5946), "560084": (12.9716, 77.5946),
        "560085": (12.9716, 77.5946), "560086": (12.9716, 77.5946), "560087": (12.9716, 77.5946),
        "560088": (12.9716, 77.5946), "560089": (12.9716, 77.5946), "560090": (12.9716, 77.5946),
        "560091": (12.9716, 77.5946), "560092": (12.9716, 77.5946), "560093": (12.9716, 77.5946),
        "560094": (12.9716, 77.5946), "560095": (12.9716, 77.5946), "560096": (12.9716, 77.5946),
        "560097": (12.9716, 77.5946), "560098": (12.9716, 77.5946), "560099": (12.9716, 77.5946),
        "560100": (12.9716, 77.5946),
        
        # Chennai
        "600001": (13.0827, 80.2707), "600002": (13.0827, 80.2707), "600003": (13.0827, 80.2707),
        "600004": (13.0827, 80.2707), "600005": (13.0827, 80.2707), "600006": (13.0827, 80.2707),
        "600007": (13.0827, 80.2707), "600008": (13.0827, 80.2707), "600009": (13.0827, 80.2707),
        "600010": (13.0827, 80.2707), "600011": (13.0827, 80.2707), "600012": (13.0827, 80.2707),
        "600013": (13.0827, 80.2707), "600014": (13.0827, 80.2707), "600015": (13.0827, 80.2707),
        "600016": (13.0827, 80.2707), "600017": (13.0827, 80.2707), "600018": (13.0827, 80.2707),
        "600019": (13.0827, 80.2707), "600020": (13.0827, 80.2707), "600021": (13.0827, 80.2707),
        "600022": (13.0827, 80.2707), "600023": (13.0827, 80.2707), "600024": (13.0827, 80.2707),
        "600025": (13.0827, 80.2707), "600026": (13.0827, 80.2707), "600027": (13.0827, 80.2707),
        "600028": (13.0827, 80.2707), "600029": (13.0827, 80.2707), "600030": (13.0827, 80.2707),
        "600031": (13.0827, 80.2707), "600032": (13.0827, 80.2707), "600033": (13.0827, 80.2707),
        "600034": (13.0827, 80.2707), "600035": (13.0827, 80.2707), "600036": (13.0827, 80.2707),
        "600037": (13.0827, 80.2707), "600038": (13.0827, 80.2707), "600039": (13.0827, 80.2707),
        "600040": (13.0827, 80.2707), "600041": (13.0827, 80.2707), "600042": (13.0827, 80.2707),
        "600043": (13.0827, 80.2707), "600044": (13.0827, 80.2707), "600045": (13.0827, 80.2707),
        "600046": (13.0827, 80.2707), "600047": (13.0827, 80.2707), "600048": (13.0827, 80.2707),
        "600049": (13.0827, 80.2707), "600050": (13.0827, 80.2707), "600051": (13.0827, 80.2707),
        "600052": (13.0827, 80.2707), "600053": (13.0827, 80.2707), "600054": (13.0827, 80.2707),
        "600055": (13.0827, 80.2707), "600056": (13.0827, 80.2707), "600057": (13.0827, 80.2707),
        "600058": (13.0827, 80.2707), "600059": (13.0827, 80.2707), "600060": (13.0827, 80.2707),
        "600061": (13.0827, 80.2707), "600062": (13.0827, 80.2707), "600063": (13.0827, 80.2707),
        "600064": (13.0827, 80.2707), "600065": (13.0827, 80.2707), "600066": (13.0827, 80.2707),
        "600067": (13.0827, 80.2707), "600068": (13.0827, 80.2707), "600069": (13.0827, 80.2707),
        "600070": (13.0827, 80.2707), "600071": (13.0827, 80.2707), "600072": (13.0827, 80.2707),
        "600073": (13.0827, 80.2707), "600074": (13.0827, 80.2707), "600075": (13.0827, 80.2707),
        "600076": (13.0827, 80.2707), "600077": (13.0827, 80.2707), "600078": (13.0827, 80.2707),
        "600079": (13.0827, 80.2707), "600080": (13.0827, 80.2707), "600081": (13.0827, 80.2707),
        "600082": (13.0827, 80.2707), "600083": (13.0827, 80.2707), "600084": (13.0827, 80.2707),
        "600085": (13.0827, 80.2707), "600086": (13.0827, 80.2707), "600087": (13.0827, 80.2707),
        "600088": (13.0827, 80.2707), "600089": (13.0827, 80.2707), "600090": (13.0827, 80.2707),
        "600091": (13.0827, 80.2707), "600092": (13.0827, 80.2707), "600093": (13.0827, 80.2707),
        "600094": (13.0827, 80.2707), "600095": (13.0827, 80.2707), "600096": (13.0827, 80.2707),
        "600097": (13.0827, 80.2707), "600098": (13.0827, 80.2707), "600099": (13.0827, 80.2707),
        "600100": (13.0827, 80.2707),
        
        # Kolkata
        "700001": (22.5726, 88.3639), "700002": (22.5726, 88.3639), "700003": (22.5726, 88.3639),
        "700004": (22.5726, 88.3639), "700005": (22.5726, 88.3639), "700006": (22.5726, 88.3639),
        "700007": (22.5726, 88.3639), "700008": (22.5726, 88.3639), "700009": (22.5726, 88.3639),
        "700010": (22.5726, 88.3639), "700011": (22.5726, 88.3639), "700012": (22.5726, 88.3639),
        "700013": (22.5726, 88.3639), "700014": (22.5726, 88.3639), "700015": (22.5726, 88.3639),
        "700016": (22.5726, 88.3639), "700017": (22.5726, 88.3639), "700018": (22.5726, 88.3639),
        "700019": (22.5726, 88.3639), "700020": (22.5726, 88.3639), "700021": (22.5726, 88.3639),
        "700022": (22.5726, 88.3639), "700023": (22.5726, 88.3639), "700024": (22.5726, 88.3639),
        "700025": (22.5726, 88.3639), "700026": (22.5726, 88.3639), "700027": (22.5726, 88.3639),
        "700028": (22.5726, 88.3639), "700029": (22.5726, 88.3639), "700030": (22.5726, 88.3639),
        "700031": (22.5726, 88.3639), "700032": (22.5726, 88.3639), "700033": (22.5726, 88.3639),
        "700034": (22.5726, 88.3639), "700035": (22.5726, 88.3639), "700036": (22.5726, 88.3639),
        "700037": (22.5726, 88.3639), "700038": (22.5726, 88.3639), "700039": (22.5726, 88.3639),
        "700040": (22.5726, 88.3639), "700041": (22.5726, 88.3639), "700042": (22.5726, 88.3639),
        "700043": (22.5726, 88.3639), "700044": (22.5726, 88.3639), "700045": (22.5726, 88.3639),
        "700046": (22.5726, 88.3639), "700047": (22.5726, 88.3639), "700048": (22.5726, 88.3639),
        "700049": (22.5726, 88.3639), "700050": (22.5726, 88.3639), "700051": (22.5726, 88.3639),
        "700052": (22.5726, 88.3639), "700053": (22.5726, 88.3639), "700054": (22.5726, 88.3639),
        "700055": (22.5726, 88.3639), "700056": (22.5726, 88.3639), "700057": (22.5726, 88.3639),
        "700058": (22.5726, 88.3639), "700059": (22.5726, 88.3639), "700060": (22.5726, 88.3639),
        "700061": (22.5726, 88.3639), "700062": (22.5726, 88.3639), "700063": (22.5726, 88.3639),
        "700064": (22.5726, 88.3639), "700065": (22.5726, 88.3639), "700066": (22.5726, 88.3639),
        "700067": (22.5726, 88.3639), "700068": (22.5726, 88.3639), "700069": (22.5726, 88.3639),
        "700070": (22.5726, 88.3639), "700071": (22.5726, 88.3639), "700072": (22.5726, 88.3639),
        "700073": (22.5726, 88.3639), "700074": (22.5726, 88.3639), "700075": (22.5726, 88.3639),
        "700076": (22.5726, 88.3639), "700077": (22.5726, 88.3639), "700078": (22.5726, 88.3639),
        "700079": (22.5726, 88.3639), "700080": (22.5726, 88.3639), "700081": (22.5726, 88.3639),
        "700082": (22.5726, 88.3639), "700083": (22.5726, 88.3639), "700084": (22.5726, 88.3639),
        "700085": (22.5726, 88.3639), "700086": (22.5726, 88.3639), "700087": (22.5726, 88.3639),
        "700088": (22.5726, 88.3639), "700089": (22.5726, 88.3639), "700090": (22.5726, 88.3639),
        "700091": (22.5726, 88.3639), "700092": (22.5726, 88.3639), "700093": (22.5726, 88.3639),
        "700094": (22.5726, 88.3639), "700095": (22.5726, 88.3639), "700096": (22.5726, 88.3639),
        "700097": (22.5726, 88.3639), "700098": (22.5726, 88.3639), "700099": (22.5726, 88.3639),
        "700100": (22.5726, 88.3639),
        
        # Pune
        "411001": (18.5204, 73.8567), "411002": (18.5204, 73.8567), "411003": (18.5204, 73.8567),
        "411004": (18.5204, 73.8567), "411005": (18.5204, 73.8567), "411006": (18.5204, 73.8567),
        "411007": (18.5204, 73.8567), "411008": (18.5204, 73.8567), "411009": (18.5204, 73.8567),
        "411010": (18.5204, 73.8567), "411011": (18.5204, 73.8567), "411012": (18.5204, 73.8567),
        "411013": (18.5204, 73.8567), "411014": (18.5204, 73.8567), "411015": (18.5204, 73.8567),
        "411016": (18.5204, 73.8567), "411017": (18.5204, 73.8567), "411018": (18.5204, 73.8567),
        "411019": (18.5204, 73.8567), "411020": (18.5204, 73.8567), "411021": (18.5204, 73.8567),
        "411022": (18.5204, 73.8567), "411023": (18.5204, 73.8567), "411024": (18.5204, 73.8567),
        "411025": (18.5204, 73.8567), "411026": (18.5204, 73.8567), "411027": (18.5204, 73.8567),
        "411028": (18.5204, 73.8567), "411029": (18.5204, 73.8567), "411030": (18.5204, 73.8567),
        "411031": (18.5204, 73.8567), "411032": (18.5204, 73.8567), "411033": (18.5204, 73.8567),
        "411034": (18.5204, 73.8567), "411035": (18.5204, 73.8567), "411036": (18.5204, 73.8567),
        "411037": (18.5204, 73.8567), "411038": (18.5204, 73.8567), "411039": (18.5204, 73.8567),
        "411040": (18.5204, 73.8567), "411041": (18.5204, 73.8567), "411042": (18.5204, 73.8567),
        "411043": (18.5204, 73.8567), "411044": (18.5204, 73.8567), "411045": (18.5204, 73.8567),
        "411046": (18.5204, 73.8567), "411047": (18.5204, 73.8567), "411048": (18.5204, 73.8567),
        "411049": (18.5204, 73.8567), "411050": (18.5204, 73.8567), "411051": (18.5204, 73.8567),
        "411052": (18.5204, 73.8567), "411053": (18.5204, 73.8567), "411054": (18.5204, 73.8567),
        "411055": (18.5204, 73.8567), "411056": (18.5204, 73.8567), "411057": (18.5204, 73.8567),
        "411058": (18.5204, 73.8567), "411059": (18.5204, 73.8567), "411060": (18.5204, 73.8567),
        "411061": (18.5204, 73.8567), "411062": (18.5204, 73.8567), "411063": (18.5204, 73.8567),
        "411064": (18.5204, 73.8567), "411065": (18.5204, 73.8567), "411066": (18.5204, 73.8567),
        "411067": (18.5204, 73.8567), "411068": (18.5204, 73.8567), "411069": (18.5204, 73.8567),
        "411070": (18.5204, 73.8567), "411071": (18.5204, 73.8567), "411072": (18.5204, 73.8567),
        "411073": (18.5204, 73.8567), "411074": (18.5204, 73.8567), "411075": (18.5204, 73.8567),
        "411076": (18.5204, 73.8567), "411077": (18.5204, 73.8567), "411078": (18.5204, 73.8567),
        "411079": (18.5204, 73.8567), "411080": (18.5204, 73.8567), "411081": (18.5204, 73.8567),
        "411082": (18.5204, 73.8567), "411083": (18.5204, 73.8567), "411084": (18.5204, 73.8567),
        "411085": (18.5204, 73.8567), "411086": (18.5204, 73.8567), "411087": (18.5204, 73.8567),
        "411088": (18.5204, 73.8567), "411089": (18.5204, 73.8567), "411090": (18.5204, 73.8567),
        "411091": (18.5204, 73.8567), "411092": (18.5204, 73.8567), "411093": (18.5204, 73.8567),
        "411094": (18.5204, 73.8567), "411095": (18.5204, 73.8567), "411096": (18.5204, 73.8567),
        "411097": (18.5204, 73.8567), "411098": (18.5204, 73.8567), "411099": (18.5204, 73.8567),
        "411100": (18.5204, 73.8567),
        
        # Ahmedabad
        "380001": (23.0225, 72.5714), "380002": (23.0225, 72.5714), "380003": (23.0225, 72.5714),
        "380004": (23.0225, 72.5714), "380005": (23.0225, 72.5714), "380006": (23.0225, 72.5714),
        "380007": (23.0225, 72.5714), "380008": (23.0225, 72.5714), "380009": (23.0225, 72.5714),
        "380010": (23.0225, 72.5714), "380011": (23.0225, 72.5714), "380012": (23.0225, 72.5714),
        "380013": (23.0225, 72.5714), "380014": (23.0225, 72.5714), "380015": (23.0225, 72.5714),
        "380016": (23.0225, 72.5714), "380017": (23.0225, 72.5714), "380018": (23.0225, 72.5714),
        "380019": (23.0225, 72.5714), "380020": (23.0225, 72.5714), "380021": (23.0225, 72.5714),
        "380022": (23.0225, 72.5714), "380023": (23.0225, 72.5714), "380024": (23.0225, 72.5714),
        "380025": (23.0225, 72.5714), "380026": (23.0225, 72.5714), "380027": (23.0225, 72.5714),
        "380028": (23.0225, 72.5714), "380029": (23.0225, 72.5714), "380030": (23.0225, 72.5714),
        "380031": (23.0225, 72.5714), "380032": (23.0225, 72.5714), "380033": (23.0225, 72.5714),
        "380034": (23.0225, 72.5714), "380035": (23.0225, 72.5714), "380036": (23.0225, 72.5714),
        "380037": (23.0225, 72.5714), "380038": (23.0225, 72.5714), "380039": (23.0225, 72.5714),
        "380040": (23.0225, 72.5714), "380041": (23.0225, 72.5714), "380042": (23.0225, 72.5714),
        "380043": (23.0225, 72.5714), "380044": (23.0225, 72.5714), "380045": (23.0225, 72.5714),
        "380046": (23.0225, 72.5714), "380047": (23.0225, 72.5714), "380048": (23.0225, 72.5714),
        "380049": (23.0225, 72.5714), "380050": (23.0225, 72.5714), "380051": (23.0225, 72.5714),
        "380052": (23.0225, 72.5714), "380053": (23.0225, 72.5714), "380054": (23.0225, 72.5714),
        "380055": (23.0225, 72.5714), "380056": (23.0225, 72.5714), "380057": (23.0225, 72.5714),
        "380058": (23.0225, 72.5714), "380059": (23.0225, 72.5714), "380060": (23.0225, 72.5714),
        "380061": (23.0225, 72.5714), "380062": (23.0225, 72.5714), "380063": (23.0225, 72.5714),
        "380064": (23.0225, 72.5714), "380065": (23.0225, 72.5714), "380066": (23.0225, 72.5714),
        "380067": (23.0225, 72.5714), "380068": (23.0225, 72.5714), "380069": (23.0225, 72.5714),
        "380070": (23.0225, 72.5714), "380071": (23.0225, 72.5714), "380072": (23.0225, 72.5714),
        "380073": (23.0225, 72.5714), "380074": (23.0225, 72.5714), "380075": (23.0225, 72.5714),
        "380076": (23.0225, 72.5714), "380077": (23.0225, 72.5714), "380078": (23.0225, 72.5714),
        "380079": (23.0225, 72.5714), "380080": (23.0225, 72.5714), "380081": (23.0225, 72.5714),
        "380082": (23.0225, 72.5714), "380083": (23.0225, 72.5714), "380084": (23.0225, 72.5714),
        "380085": (23.0225, 72.5714), "380086": (23.0225, 72.5714), "380087": (23.0225, 72.5714),
        "380088": (23.0225, 72.5714), "380089": (23.0225, 72.5714), "380090": (23.0225, 72.5714),
        "380091": (23.0225, 72.5714), "380092": (23.0225, 72.5714), "380093": (23.0225, 72.5714),
        "380094": (23.0225, 72.5714), "380095": (23.0225, 72.5714), "380096": (23.0225, 72.5714),
        "380097": (23.0225, 72.5714), "380098": (23.0225, 72.5714), "380099": (23.0225, 72.5714),
        "380100": (23.0225, 72.5714),
        
        # Visakhapatnam
        "530001": (17.6868, 83.2185), "530002": (17.6868, 83.2185), "530003": (17.6868, 83.2185),
        "530004": (17.6868, 83.2185), "530005": (17.6868, 83.2185), "530006": (17.6868, 83.2185),
        "530007": (17.6868, 83.2185), "530008": (17.6868, 83.2185), "530009": (17.6868, 83.2185),
        "530010": (17.6868, 83.2185), "530011": (17.6868, 83.2185), "530012": (17.6868, 83.2185),
        "530013": (17.6868, 83.2185), "530014": (17.6868, 83.2185), "530015": (17.6868, 83.2185),
        "530016": (17.6868, 83.2185), "530017": (17.6868, 83.2185), "530018": (17.6868, 83.2185),
        "530019": (17.6868, 83.2185), "530020": (17.6868, 83.2185), "530021": (17.6868, 83.2185),
        "530022": (17.6868, 83.2185), "530023": (17.6868, 83.2185), "530024": (17.6868, 83.2185),
        "530025": (17.6868, 83.2185), "530026": (17.6868, 83.2185), "530027": (17.6868, 83.2185),
        "530028": (17.6868, 83.2185), "530029": (17.6868, 83.2185), "530030": (17.6868, 83.2185),
        "530031": (17.6868, 83.2185), "530032": (17.6868, 83.2185), "530033": (17.6868, 83.2185),
        "530034": (17.6868, 83.2185), "530035": (17.6868, 83.2185), "530036": (17.6868, 83.2185),
        "530037": (17.6868, 83.2185), "530038": (17.6868, 83.2185), "530039": (17.6868, 83.2185),
        "530040": (17.6868, 83.2185), "530041": (17.6868, 83.2185), "530042": (17.6868, 83.2185),
        "530043": (17.6868, 83.2185), "530044": (17.6868, 83.2185), "530045": (17.6868, 83.2185),
        "530046": (17.6868, 83.2185), "530047": (17.6868, 83.2185), "530048": (17.6868, 83.2185),
        "530049": (17.6868, 83.2185), "530050": (17.6868, 83.2185), "530051": (17.6868, 83.2185),
        "530052": (17.6868, 83.2185), "530053": (17.6868, 83.2185), "530054": (17.6868, 83.2185),
        "530055": (17.6868, 83.2185), "530056": (17.6868, 83.2185), "530057": (17.6868, 83.2185),
        "530058": (17.6868, 83.2185), "530059": (17.6868, 83.2185), "530060": (17.6868, 83.2185),
        "530061": (17.6868, 83.2185), "530062": (17.6868, 83.2185), "530063": (17.6868, 83.2185),
        "530064": (17.6868, 83.2185), "530065": (17.6868, 83.2185), "530066": (17.6868, 83.2185),
        "530067": (17.6868, 83.2185), "530068": (17.6868, 83.2185), "530069": (17.6868, 83.2185),
        "530070": (17.6868, 83.2185), "530071": (17.6868, 83.2185), "530072": (17.6868, 83.2185),
        "530073": (17.6868, 83.2185), "530074": (17.6868, 83.2185), "530075": (17.6868, 83.2185),
        "530076": (17.6868, 83.2185), "530077": (17.6868, 83.2185), "530078": (17.6868, 83.2185),
        "530079": (17.6868, 83.2185), "530080": (17.6868, 83.2185), "530081": (17.6868, 83.2185),
        "530082": (17.6868, 83.2185), "530083": (17.6868, 83.2185), "530084": (17.6868, 83.2185),
        "530085": (17.6868, 83.2185), "530086": (17.6868, 83.2185), "530087": (17.6868, 83.2185),
        "530088": (17.6868, 83.2185), "530089": (17.6868, 83.2185), "530090": (17.6868, 83.2185),
        "530091": (17.6868, 83.2185), "530092": (17.6868, 83.2185), "530093": (17.6868, 83.2185),
        "530094": (17.6868, 83.2185), "530095": (17.6868, 83.2185), "530096": (17.6868, 83.2185),
        "530097": (17.6868, 83.2185), "530098": (17.6868, 83.2185), "530099": (17.6868, 83.2185),
        "530100": (17.6868, 83.2185),
    }
    
    @staticmethod
    def get_coordinates_from_pincode(pincode: str) -> Optional[Tuple[float, float]]:
        """
        Get coordinates from pincode using multiple APIs
        Returns (latitude, longitude) or None if not found
        """
        if not pincode:
            return None
        
        # Clean pincode
        pincode = str(pincode).strip()
        
        # Check our local mapping first (for major cities)
        if pincode in LocationService.PINCODE_COORDINATES:
            print(f"[LOCATION] Found coordinates in local cache for pincode {pincode}")
            return LocationService.PINCODE_COORDINATES[pincode]
        
        # Check dynamic cache
        if pincode in LocationService._coordinate_cache:
            print(f"[LOCATION] Found coordinates in dynamic cache for pincode {pincode}")
            return LocationService._coordinate_cache[pincode]
        
        # Try multiple APIs in order of preference
        apis = [
            LocationService._get_from_nominatim,
            LocationService._get_from_postalpincode,
            LocationService._get_from_geocoding_api
        ]
        
        for api_func in apis:
            try:
                coordinates = api_func(pincode)
                if coordinates:
                    print(f"[LOCATION] Successfully got coordinates for pincode {pincode}: {coordinates}")
                    # Cache the result
                    LocationService._coordinate_cache[pincode] = coordinates
                    return coordinates
            except Exception as e:
                print(f"[LOCATION] API failed for pincode {pincode}: {e}")
                continue
        
        print(f"[LOCATION] No coordinates found for pincode {pincode}")
        return None
    
    @staticmethod
    def _get_from_nominatim(pincode: str) -> Optional[Tuple[float, float]]:
        """Get coordinates from OpenStreetMap Nominatim API (free)"""
        try:
            response = requests.get(
                f"https://nominatim.openstreetmap.org/search",
                params={
                    'postalcode': pincode,
                    'countrycodes': 'in',
                    'format': 'json',
                    'limit': 1
                },
                headers={'User-Agent': 'HomeAndOwn/1.0'},
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                if data and len(data) > 0:
                    lat = float(data[0]['lat'])
                    lon = float(data[0]['lon'])
                    return (lat, lon)
        except Exception as e:
            print(f"[LOCATION] Nominatim API error: {e}")
        return None
    
    @staticmethod
    def _get_from_postalpincode(pincode: str) -> Optional[Tuple[float, float]]:
        """Get coordinates from PostalPincode API"""
        try:
            response = requests.get(
                f"https://api.postalpincode.in/pincode/{pincode}",
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                if data and len(data) > 0 and data[0].get('Status') == 'Success':
                    post_office = data[0]['PostOffice'][0]
                    city = post_office.get('District', '')
                    state = post_office.get('State', '')
                    
                    # Use city and state to get coordinates
                    if city and state:
                        return LocationService._get_coordinates_from_city_state(city, state)
        except Exception as e:
            print(f"[LOCATION] PostalPincode API error: {e}")
        return None
    
    @staticmethod
    def _get_from_geocoding_api(pincode: str) -> Optional[Tuple[float, float]]:
        """Get coordinates from a generic geocoding service"""
        try:
            # Using a free geocoding service
            response = requests.get(
                f"https://geocode.xyz/{pincode},India?json=1",
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get('latt') and data.get('longt'):
                    lat = float(data['latt'])
                    lon = float(data['longt'])
                    return (lat, lon)
        except Exception as e:
            print(f"[LOCATION] Geocoding API error: {e}")
        return None
    
    @staticmethod
    def _get_coordinates_from_city_state(city: str, state: str) -> Optional[Tuple[float, float]]:
        """Get coordinates from city and state using Nominatim"""
        try:
            query = f"{city}, {state}, India"
            response = requests.get(
                f"https://nominatim.openstreetmap.org/search",
                params={
                    'q': query,
                    'format': 'json',
                    'limit': 1
                },
                headers={'User-Agent': 'HomeAndOwn/1.0'},
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                if data and len(data) > 0:
                    lat = float(data[0]['lat'])
                    lon = float(data[0]['lon'])
                    return (lat, lon)
        except Exception as e:
            print(f"[LOCATION] City/State geocoding error: {e}")
        return None
    
    @staticmethod
    def calculate_distance(lat1: float, lon1: float, lat2: float, lon2: float) -> float:
        """
        Calculate distance between two coordinates using Haversine formula
        Returns distance in kilometers
        """
        import math
        
        # Convert to radians
        lat1, lon1, lat2, lon2 = map(math.radians, [lat1, lon1, lat2, lon2])
        
        # Haversine formula
        dlat = lat2 - lat1
        dlon = lon2 - lon1
        a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2
        c = 2 * math.asin(math.sqrt(a))
        
        # Radius of earth in kilometers
        r = 6371
        
        return c * r
    
    @staticmethod
    async def get_properties_by_pincode(pincode: str, radius_km: float = 10.0) -> List[Dict[str, Any]]:
        """
        Get properties within a radius of the given pincode
        """
        try:
            # Get coordinates for the pincode
            coordinates = LocationService.get_coordinates_from_pincode(pincode)
            if not coordinates:
                return []
            
            target_lat, target_lon = coordinates
            
            # Get all properties with coordinates
            properties = await db.select("properties", filters={"status": "active"})
            
            nearby_properties = []
            for property in properties:
                prop_lat = property.get('latitude')
                prop_lon = property.get('longitude')
                
                # Skip properties without coordinates
                if prop_lat is None or prop_lon is None:
                    continue
                
                # Calculate distance
                distance = LocationService.calculate_distance(
                    target_lat, target_lon, prop_lat, prop_lon
                )
                
                # Add to nearby properties if within radius
                if distance <= radius_km:
                    property['distance_km'] = round(distance, 2)
                    nearby_properties.append(property)
            
            # Sort by distance
            nearby_properties.sort(key=lambda x: x.get('distance_km', float('inf')))
            
            return nearby_properties
            
        except Exception as e:
            print(f"[LOCATION] Error getting properties by pincode: {e}")
            return []
    
    @staticmethod
    async def update_property_coordinates(property_id: str, pincode: str) -> Dict[str, Any]:
        """
        Update property coordinates based on pincode
        """
        try:
            coordinates = LocationService.get_coordinates_from_pincode(pincode)
            if not coordinates:
                return {"success": False, "error": "Could not get coordinates for pincode"}
            
            lat, lon = coordinates
            
            # Update property with coordinates
            await db.update(
                "properties", 
                {"latitude": lat, "longitude": lon}, 
                {"id": property_id}
            )
            
            return {
                "success": True,
                "message": f"Coordinates updated for property",
                "latitude": lat,
                "longitude": lon
            }
            
        except Exception as e:
            print(f"[LOCATION] Error updating property coordinates: {e}")
            return {"success": False, "error": str(e)}
    
    @staticmethod
    async def get_nearby_properties(latitude: float, longitude: float, radius_km: float = 10.0) -> List[Dict[str, Any]]:
        """
        Get properties within a radius of given coordinates
        """
        try:
            # Get all active properties
            properties = await db.select("properties", filters={"status": "active"})
            
            nearby_properties = []
            for property in properties:
                prop_lat = property.get('latitude')
                prop_lon = property.get('longitude')
                
                # Skip properties without coordinates
                if prop_lat is None or prop_lon is None:
                    continue
                
                # Calculate distance
                distance = LocationService.calculate_distance(
                    latitude, longitude, prop_lat, prop_lon
                )
                
                # Add to nearby properties if within radius
                if distance <= radius_km:
                    property['distance_km'] = round(distance, 2)
                    nearby_properties.append(property)
            
            # Sort by distance
            nearby_properties.sort(key=lambda x: x.get('distance_km', float('inf')))
            
            return nearby_properties
            
        except Exception as e:
            print(f"[LOCATION] Error getting nearby properties: {e}")
            return []
    
    @staticmethod
    def format_location_display(property: Dict[str, Any]) -> str:
        """
        Format property location for display
        """
        city = property.get('city', '')
        state = property.get('state', '')
        pincode = property.get('zip_code', '')
        
        location_parts = []
        if city:
            location_parts.append(city)
        if state:
            location_parts.append(state)
        if pincode:
            location_parts.append(pincode)
        
        return ', '.join(location_parts) if location_parts else 'Location not specified'
    
    @staticmethod
    async def get_properties_without_coordinates() -> List[Dict[str, Any]]:
        """
        Get properties that don't have coordinates set
        """
        try:
            properties = await db.select("properties", filters={"status": "active"})
            return [p for p in properties if p.get('latitude') is None or p.get('longitude') is None]
        except Exception as e:
            print(f"[LOCATION] Error getting properties without coordinates: {e}")
            return []
